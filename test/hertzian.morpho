// Create a packing of Hertzian particles on a sphere
// by inflating the particles
import meshtools
import plot
import optimize
import pairwise 

var Np = 100 // Number of particles

// Create the mesh, which consists of Np random points each representing
// a charge on the unit sphere.
var build = MeshBuilder()
for (i in 1..Np) {
  var x = Matrix([2*random()-1, 2*random()-1, 2*random()-1])
  x/=x.norm() // Project onto unit sphere
  build.addvertex(x)
}
var mesh = build.build() // Tell the MeshBuilder to build the mesh

// Specify the problem
var problem = OptimizationProblem(mesh)

// The particle repel one another by a Coulomb potential.
// We supply the potential and it's derivative wrt r as anonymous functions.
var hertz = HertzianPotential(0.01)
var lv = Pairwise(hertz)
problem.addenergy(lv)

// Constrain the particles on the unit sphere via a level set constraint.
// The level set function and its gradient are supplied as anonymous functions.
var lsph = ScalarPotential(fn (x,y,z) x^2+y^2+z^2-1, fn (x,y,z) Matrix([2*x, 2*y, 2*z]))
problem.addlocalconstraint(lsph)

// Set up the optimizer to optimize this problem wrt the mesh vertex positions.
var opt = ShapeOptimizer(problem, mesh)

// Choose a stepsize
opt.stepsize=0.01/sqrt(Np)

// Do a few iterations at fixed stepsize to move away from the initally random
// condition. [This helps condition the problem]
opt.relax(5)

var Rmax = 2/sqrt(Np)

for (sigma in 0.1*Rmax..2*Rmax:(2-0.1)*Rmax/40) {
  hertz.sigma = sigma
  // Now perform gradient descent 
  opt.conjugategradient(1000) // Perform up to 1000 iterations of direct gradient descent
}

// Visualize the results
var g = Graphics()
for (i in 0...mesh.count()) {
  // Display each particle as a sphere
  g.display(Sphere(mesh.vertexposition(i),hertz.sigma/2))
}
Show(g) // Open up the viewer application
