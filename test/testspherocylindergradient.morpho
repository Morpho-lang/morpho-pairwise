import pairwise
import meshtools 
import plot

fn numericalgradient(func, m, eps=1e-8) {
   var x=m.vertexmatrix()
   var grad=x.clone()
   var dim = x.dimensions()[0]

   for (i in 0...m.count()) {
      for (j in 0...dim) {
         var temp = x[j,i]
         x[j,i]=temp+eps
         var fr=func.total(m)
         x[j,i]=temp-eps
         var fl=func.total(m)
         x[j,i]=temp
         grad[j,i]=(fr-fl)/(2*eps)
      }
   }

   return grad
} 

fn numericalfieldgradient(func, m, f, eps=1e-8) {
   var grad=f.clone()
   //var lmat = f.__linearize() 

   /*for (i in 0...m.count()) {
      for (j in 0...dim) {
         var temp = x[j,i]
         x[j,i]=temp+eps
         var fr=func.total(m)
         x[j,i]=temp-eps
         var fl=func.total(m)
         x[j,i]=temp
         grad[j,i]=(fr-fl)/(2*eps)
      }
   }*/

   return grad
} 

var mb = MeshBuilder() 
mb.addvertex([-2,0,0])
mb.addvertex([2,0,0])
var m = mb.build() 

var f = Field(m, Matrix([1,0,0]))

print "Total"
print SpherocylinderOverlap(f).total(m)

print "Gradient"
print SpherocylinderOverlap(f).gradient(m)

print numericalgradient(SpherocylinderOverlap(f), m)

print "Field gradient:"
print SpherocylinderOverlap(f).fieldgradient(m)

print numericalfieldgradient(SpherocylinderOverlap(f), m, f)