// Test approximation of facets as point masses for gravity functionality
import meshtools
import plot
import optimize
import pairwise 

var L = 1
var r = 0.1

// Test mesh: two opposing equilateral triangles centered on [-L,0] and [L,0] of radius r
//    x               x
//    |\             /|
//    | \           / |
//    |  x    0    x  |
//    | /           \ |
//    |/             \|
//    x               x

var mb = MeshBuilder() 
for (theta in 0...2*Pi:2*Pi/3) {
  mb.addvertex([-L+r*cos(theta),r*sin(theta),0])  
}
for (theta in 0...2*Pi:2*Pi/3) {
  mb.addvertex([L-r*cos(theta),r*sin(theta),0])  
}
mb.addface([0,1,2])
mb.addface([3,4,5])
var m = mb.build() 

// Show(plotmesh(m, grade=[0,2]))


var c = CoulombPotential() 
print ">>Value"
print c.value(2) 

var lp = Pairwise(c, grade=2)

print ">>Total"
print lp.total(m) 

print ">>Integrand"
print lp.integrand(m) 

print ">>Gradient"
print lp.gradient(m) 

fn numericalgradient(func, m, eps=1e-8) {
   var x=m.vertexmatrix()
   var grad=x.clone()
   var dim = x.dimensions()[0]

   for (i in 0...m.count()) {
      for (j in 0...dim) {
         var temp = x[j,i]
         x[j,i]=temp+eps
         var fr=func.total(m)
         x[j,i]=temp-eps
         var fl=func.total(m)
         x[j,i]=temp
         grad[j,i]=(fr-fl)/(2*eps)
      }
   }

   return grad
} 

print numericalgradient(lp, m)

